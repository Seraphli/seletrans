from .base import *

VALID_LANG = {
    "zh": [
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "zh",
        "vie",
    ],
    "en": [
        "zh",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "ara": [
        "zh",
        "en",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "est": [
        "zh",
        "en",
        "ara",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "bul": [
        "zh",
        "en",
        "ara",
        "est",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "pl": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "dan": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "de": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "ru": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "fra": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "fin": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "kor": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "nl": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "cs": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "rom": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "pt": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "jp": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "jpka",
        "vie",
    ],
    "swe": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "slo": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "th": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "wyw": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "spa": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "el": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "hu",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "hu": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "it",
        "yue",
        "cht",
        "vie",
    ],
    "it": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "yue",
        "cht",
        "vie",
    ],
    "yue": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "cht",
        "vie",
    ],
    "cht": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "vie",
    ],
    "vie": [
        "zh",
        "en",
        "ara",
        "est",
        "bul",
        "pl",
        "dan",
        "de",
        "ru",
        "fra",
        "fin",
        "kor",
        "nl",
        "cs",
        "rom",
        "pt",
        "jp",
        "swe",
        "slo",
        "th",
        "wyw",
        "spa",
        "el",
        "hu",
        "it",
        "yue",
        "cht",
    ],
}


class Baidu(Base):
    URL = "https://fanyi.baidu.com"

    def __init__(self, debug=False):
        super().__init__(debug)
        self.url_map = {
            ("v2transapi",): Handlers(
                [self._get_simple_result, self._get_dict_result], self._debug_save_json
            ),
        }
        self.skip_guide = False

    def preprocess(self):
        if not self.skip_guide:
            elem = self.driver.find_element(
                By.XPATH, "//span[@class='app-guide-close']"
            )
            elem.click()
            self.skip_guide = True

    def validate_lang(self, source, target):
        if source not in VALID_LANG:
            raise Exception(f"{source} is not a valid source language.")
        if target not in VALID_LANG[source]:
            raise Exception(f"{target} is not a valid target language.")

    def set_source_lang(self, source):
        lang_btn = self.driver.find_element(
            By.XPATH, "//a[@class='language-btn select-from-language']"
        )
        lang_btn.click()
        if source == "auto":
            elem = self.wait_and_find_elem(
                By.XPATH, "//li[contains(@class,'lang-item')]"
            )
            elem.click()
        else:
            elem = self.wait_and_find_elem(By.XPATH, "//input[@class='search-input']")
            elem.send_keys(source)
            elem = self.wait_and_find_elem(
                By.XPATH, "//div[@class='search-result-item']"
            )
            elem.click()
        textarea = self.get_textarea()
        if not self.try_click(textarea):
            lang_btn.click()

    def set_target_lang(self, target):
        lang_btn = self.driver.find_element(
            By.XPATH, "//a[@class='language-btn select-to-language']"
        )
        lang_btn.click()
        elem = self.wait_and_find_elem(By.XPATH, "//input[@class='search-input']")
        elem.send_keys(target)
        elem = self.wait_and_find_elem(By.XPATH, "//div[@class='search-result-item']")
        elem.click()
        textarea = self.get_textarea()
        if not self.try_click(textarea):
            lang_btn.click()

    def _get_simple_result(self, body):
        resp = json.loads(body)
        self.result = [resp["trans_result"]["data"][0]["dst"]]
        return True

    def _get_dict_result(self, body):
        resp = json.loads(body)
        if "dict_result" not in resp:
            self.dict_result = ""
            return False
        dict_result = []
        parts = resp["dict_result"]["simple_means"]["symbols"][0]["parts"]
        for part in parts:
            if "part" in part:
                wmeans = part["means"]
                wtype = part["part"]
                dict_result.append({"type": wtype, "means": wmeans})
            else:
                means = part["means"]
                for mean in means:
                    if "means" not in mean:
                        continue
                    wmeans = mean["means"]
                    wtype = mean["part"]
                    dict_result.append({"type": wtype, "means": wmeans})
        self.dict_result = dict_result
        return True

    def play_sound(self, check_interval=0.1):
        elem = self.wait_and_find_elem(By.XPATH, "//div[@class='input-operate']")
        elem = elem.find_element(
            By.XPATH, "//a[@class='operate-btn op-sound data-hover-tip']"
        )
        class_attr = elem.get_attribute("class")
        if not self.try_click(elem):
            ActionChains(self.driver).send_keys_to_element(
                self.get_textarea(), Keys.ENTER
            ).perform()
        elem.click()
        while True:
            _attr = elem.get_attribute("class")
            if _attr == class_attr:
                break
            time.sleep(check_interval)
        time.sleep(check_interval)
